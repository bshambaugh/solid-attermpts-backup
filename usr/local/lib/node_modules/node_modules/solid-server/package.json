{
  "_args": [
    [
      ".",
      ""
    ]
  ],
  "_from": "bin/node-solid-server/node-solid-server",
  "_id": "solid-server@2.3.0",
  "_inCache": true,
  "_installable": true,
  "_location": "/solid-server",
  "_phantomChildren": {},
  "_requested": {
    "name": null,
    "raw": ".",
    "rawSpec": ".",
    "scope": null,
    "spec": "/usr/local/bin/node-solid-server/node-solid-server",
    "type": "directory"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "file:bin/node-solid-server/node-solid-server",
  "_shasum": "beadb5201973016bf0cf72f95c9c6a7db29fed5b",
  "_shrinkwrap": null,
  "_spec": ".",
  "_where": "",
  "author": {
    "email": "timbl@w3.org",
    "name": "Tim Berners-Lee"
  },
  "bin": {
    "solid": "./bin/solid.js"
  },
  "bugs": {
    "url": "http://github.com/solid/node-solid-server/issues"
  },
  "dependencies": {
    "async": "^1.3.0",
    "body-parser": "^1.14.2",
    "busboy": "^0.2.12",
    "camelize": "^1.0.0",
    "colors": "^1.1.2",
    "cors": "^2.7.1",
    "debug": "^2.2.0",
    "express": "^4.13.3",
    "express-session": "^1.11.3",
    "extend": "^3.0.0",
    "from2": "^2.1.0",
    "fs-extra": "^0.30.0",
    "glob": "^7.0.0",
    "inquirer": "^1.0.2",
    "ip-range-check": "0.0.1",
    "is-ip": "^1.0.0",
    "jsonld": "^0.4.5",
    "li": "^1.0.1",
    "mime": "^1.3.4",
    "moment": "^2.13.0",
    "n3": "^0.4.3",
    "negotiator": "^0.6.0",
    "node-forge": "^0.6.38",
    "node-uuid": "^1.4.3",
    "nodemailer": "^2.3.2",
    "nomnom": "^1.8.1",
    "rdflib": "^0.6.1",
    "request": "^2.72.0",
    "rimraf": "^2.5.0",
    "run-waterfall": "^1.1.3",
    "solid-ws": "^0.2.2",
    "string": "^3.3.0",
    "uuid": "^2.0.1",
    "valid-url": "^1.0.9",
    "vhost": "^3.0.2",
    "webid": "^0.3.7"
  },
  "description": "Solid server on top of the file-system",
  "devDependencies": {
    "chai": "^3.0.0",
    "mocha": "^2.2.5",
    "nock": "^7.0.2",
    "rsvp": "^3.1.0",
    "run-waterfall": "^1.1.3",
    "sinon": "^1.17.4",
    "standard": "^7.0.1",
    "supertest": "^1.0.1"
  },
  "gitHead": "bfda3462e9fe8521184a30c61775f60420c6cd44",
  "homepage": "http://github.com/solid/node-solid-server",
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "email": "me@nicolagreco.com",
      "name": "Nicola Greco"
    },
    {
      "email": "martinmr@mit.edu",
      "name": "Martin Martinez Rivera"
    }
  ],
  "name": "solid-server",
  "optionalDependencies": {},
  "readme": "# solid-server in Node\n\n[![](https://img.shields.io/badge/project-Solid-7C4DFF.svg?style=flat-square)](https://github.com/solid/solid)\n[![Build Status](https://travis-ci.org/solid/node-solid-server.svg?branch=master&style=flat-square)](https://travis-ci.org/solid/node-solid-server)\n[![NPM Version](https://img.shields.io/npm/v/solid-server.svg?style=flat-square)](https://npm.im/solid-server)\n[![Gitter chat](https://img.shields.io/badge/gitter-join%20chat%20%E2%86%92-brightgreen.svg?style=flat-square)](http://gitter.im/solid/node-solid-server)\n\n> [Solid](https://github.com/solid) server in [NodeJS](https://nodejs.org/)\n\n`solid-server` lets you run a Solid server on top of the file-system. You can use it as a [command-line tool](https://github.com/solid/node-solid-server/blob/master/README.md#command-line-usage) (easy) or as a [library](https://github.com/solid/node-solid-server/blob/master/README.md#library-usage) (advanced).\n\n## Solid Features supported\n- [x] [Linked Data Platform](http://www.w3.org/TR/ldp/)\n- [x] [Web Access Control](http://www.w3.org/wiki/WebAccessControl)\n- [x] [WebID+TLS Authentication](https://www.w3.org/2005/Incubator/webid/spec/tls/)\n- [x] [Real-time live updates](https://github.com/solid/solid-spec#subscribing) (using WebSockets)\n- [x] Identity provider for WebID\n- [x] Proxy for cross-site data access\n- [ ] Group members in ACL\n- [x] Email account recovery\n\n## Command Line Usage\n\n### Install\n\nTo install, first install [Node](https://nodejs.org/en/) and then run the following\n\n```bash\n$ npm install -g solid-server\n```\n\n### Run a single-user server (beginner)\n\nThe easiest way to setup `solid-sever` is by running the wizard. This will create a `config.json` in your current folder\n\n```bash\n$ solid init\n```\n\nTo run your server, simply run `solid start`:\n\n```bash\n$ solid start\n# Solid server (solid v0.2.24) running on https://localhost:8443/\n```\n\nIf you prefer to use flags instead, the following would be the equivalent\n\n```bash\n$ solid start --port 8443 --ssl-key path/to/ssl-key.pem --ssl-cert path/to/ssl-cert.pem\n# Solid server (solid v0.2.24) running on https://localhost:8443/\n```\n\nIf you want to run `solid` on a particular folder (different from the one you are in, e.g. `path/to/folder`):\n\n```bash\n$ solid start --root path/to/folder --port 8443 --ssl-key path/to/ssl-key.pem --ssl-cert path/to/ssl-cert.pem\n# Solid server (solid v0.2.24) running on https://localhost:8443/\n```\n\n##### How do I get the --ssl-key and the --ssl-cert?\nYou need an SSL certificate you get this from your domain provider or for free from [Let's Encrypt!](https://letsencrypt.org/getting-started/).\n\nIf you don't have one yet, or you just want to test `solid`, generate a certificate (**DO NOT USE IN PRODUCTION**):\n```\n$ openssl genrsa 2048 > ../localhost.key\n$ openssl req -new -x509 -nodes -sha256 -days 3650 -key ../localhost.key -subj '/CN=*.localhost' > ../localhost.cert\n```\n\n### Run multi-user server (intermediate)\n\nYou can run `solid` so that new users can sign up, in other words, get their WebIDs _username.yourdomain.com_.\n\nPre-requisites:\n- Get a [Wildcard Certificate](https://en.wikipedia.org/wiki/Wildcard_certificate)\n- Add a Wildcard DNS record in your DNS zone (e.g.`*.yourdomain.com`)\n- (If you are running locally) Add the line `127.0.0.1 *.localhost` to `/etc/hosts`\n\n```bash\n$ solid init \n..\n? Allow users to register their WebID (y/N) # write `y` here\n..\n$ solid start\n```\n\nOtherwise, if you want to use flags, this would be the equivalent\n\n```bash\n$ solid --allow-signup --port 8443 --cert /path/to/cert --key /path/to/key --root ./accounts\n```\n\nYour users will have a dedicated folder under `./accounts`. Also, your root domain's website will be in `./accounts/yourdomain.tld`. New users can create accounts on `/accounts/new` and create new certificates on `/accounts/cert`. An easy-to-use sign-up tool is found on `/accounts`.\n\n##### How can send emails to my users with my Gmail?\n\n> To use Gmail you may need to configure [\"Allow Less Secure Apps\"](https://www.google.com/settings/security/lesssecureapps) in your Gmail account unless you are using 2FA in which case you would have to create an [Application Specific](https://security.google.com/settings/security/apppasswords) password. You also may need to unlock your account with [\"Allow access to your Google account\"](https://accounts.google.com/DisplayUnlockCaptcha) to use SMTP.\n\n### Run the Linked Data Platform (intermediate)\nIf you don't want WebID Authentication and Web Access Control, you can run a simple Linked Data Platform.\n\n```bash\n# over HTTP\n$ solid start --port 8080 --no-webid\n# over HTTPS\n$ solid start --port 8080 --ssl-key key.pem --ssl-cert cert.pem --no-webid\n```\n\n**Note:** if you want to run on HTTP, do not pass the `--ssl-*` flags, but keep `--no-webid`\n\n\n### Extra flags (expert)\nThe command line tool has the following options\n\n```\n$ solid \n\n  Usage: solid [options] [command]\n\n  Commands:\n    init [options]    create solid server configurations\n    start [options]   run the Solid server\n\n  Options:\n    -h, --help     output usage information\n    -V, --version  output the version number\n\n\n$ solid init --help\n\n  Usage: init [options]\n  Create solid server configurations\n\n  Options:\n    -h, --help  output usage information\n    --advanced  Ask for all the settings\n\n\n$ solid start --help\n  Usage: start [options]\n  run the Solid server\n\n  Options:\n    -h, --help              output usage information\n    --root [value]          Root folder to serve (defaut: './')\n    --port [value]          Port to use\n    --webid                 Enable WebID+TLS authentication (use `--no-webid` for HTTP instead of HTTPS)\n    --owner [value]         Set the owner of the storage\n    --ssl-key [value]       Path to the SSL private key in PEM format\n    --ssl-cert [value]      Path to the SSL certificate key in PEM format\n    --idp                   Allow users to register their WebID\n    --proxy [value]         Serve proxy on path\n    --file-browser [value]  App to browse files\n    --data-browser          Enable viewing RDF resources using a default data browser application (e.g. mashlib)\n    --suffix-acl [value]    Suffix for acl files\n    --suffix-meta [value]   Suffix for metadata files\n    --secret [value]        Secret used to sign the session ID cookie (e.g. \"your secret phrase\")\n    --error-pages [value]   Folder from which to look for custom error pages files (files must be named <error-code>.html -- eg. 500.html)\n    --mount [value]         Serve on a specific URL path (default: '/')\n    --force-user [value]    Force a WebID to always be logged in (useful when offline)\n    --strict-origin         Enforce same origin policy in the ACL\n    -v, --verbose           Print the logs to console\n```\n\n## Library Usage\n\n### Install Dependencies\n\n```\nnpm install\n```\n\n### Library Usage\n\nThe library provides two APIs:\n\n- `solid.createServer(settings)`: starts a ready to use\n    [Express](http://expressjs.com) app.\n- `lnode(settings)`: creates an [Express](http://expressjs.com) that you can\n    mount in your existing express app.\n\nIn case the `settings` is not passed, then it will start with the following\ndefault settings.\n\n```javascript\n{\n  cache: 0, // Set cache time (in seconds), 0 for no cache\n  live: true, // Enable live support through WebSockets\n  root: './', // Root location on the filesystem to serve resources\n  secret: 'node-ldp', // Express Session secret key\n  cert: false, // Path to the ssl cert\n  key: false, // Path to the ssl key\n  mount: '/', // Where to mount Linked Data Platform\n  webid: false, // Enable WebID+TLS authentication\n  suffixAcl: '.acl', // Suffix for acl files\n  proxy: false, // Where to mount the proxy\n  errorHandler: false, // function(err, req, res, next) to have a custom error handler\n  errorPages: false // specify a path where the error pages are\n}\n```\n\nHave a look at the following examples or in the\n[`examples/`](https://github.com/solid/node-solid-server/tree/master/examples) folder\nfor more complex ones\n\n##### Simple Example\n\nYou can create an `solid` server ready to use using `solid.createServer(opts)`\n\n```javascript\nvar solid = require('solid-server')\nvar ldp = solid.createServer({\n    key: '/path/to/sslKey.pem',\n    cert: '/path/to/sslCert.pem',\n    webid: true\n})\nldp.listen(3000, function() {\n  // Started Linked Data Platform\n})\n```\n\n##### Advanced Example\n\nYou can integrate `solid` in your existing [Express](https://expressjs.org)\napp, by mounting the `solid` app on a specific path using `lnode(opts)`.\n\n```javascript\nvar solid = require('solid-server')\nvar app = require('express')()\napp.use('/test', solid(yourSettings))\napp.listen(3000, function() {\n  // Started Express app with ldp on '/test'\n})\n...\n```\n\n##### Logging\n\nRun your app with the `DEBUG` variable set:\n\n```bash\n$ DEBUG=\"solid:*\" node app.js\n```\n\n## Testing `solid` Locally\n\n#### Pre-Requisites\n\nIn order to really get a feel for the Solid platform, and to test out `solid`,\nyou will need the following:\n\n1. A WebID profile and browser certificate from one of the Solid-compliant\n    identity providers, such as [databox.me](https://databox.me).\n\n2. A server-side SSL certificate for `solid` to use (see the section below\n    on creating a self-signed certificate for testing).\n\nWhile these steps are technically optional (since you could launch it in\nHTTP/LDP-only mode), you will not be able to use any actual Solid features\nwithout them.\n\n#### Creating a certificate for local testing\n\nWhen deploying `solid` in production, we recommend that you go the\nusual Certificate Authority route to generate your SSL certificate (as you\nwould with any website that supports HTTPS). However, for testing it locally,\nyou can easily generate a self-signed certificate for whatever domain you're\nworking with.\n\nFor example, here is how to generate a self-signed certificate for `localhost`\nusing the `openssl` library:\n\n```bash\n\nsolid --webid --port 8443 --cert ../localhost.cert --key ../localhost.key -v\n```\n\nNote that this example creates the `localhost.cert` and `localhost.key` files\nin a directory one level higher from the current, so that you don't\naccidentally commit your certificates to `solid` while you're developing.\n\n#### Accessing your server\n\nIf you started your `solid` server locally on port 8443 as in the example\nabove, you would then be able to visit `https://localhost:8443` in the browser\n(ignoring the Untrusted Connection browser warnings as usual), where your\n`solid` server would redirect you to the default viewer app (see the\n`--file-browser` server config parameter), which is usually the\n[github.io/warp](https://linkeddata.github.io/warp/#/list/) file browser.\n\nAccessing most Solid apps (such as Warp) will prompt you to select your browser\nside certificate which contains a WebID from a Solid storage provider (see\nthe [pre-requisites](#pre-requisites) discussion above).\n\n#### Editing your local `/etc/hosts`\n\nTo test certificates and account creation on subdomains, `solid`'s test suite\nuses the following localhost domains: `nic.localhost`, `tim.localhost`, and\n`nicola.localhost`. You will need to create host file entries for these, in\norder for the tests to pass.\n\nEdit your `/etc/hosts` file, and append:\n\n```\n# Used for unit testing solid\n127.0.0.1 nic.localhost, tim.localhost, nicola.localhost\n```\n\n#### Running the Unit Tests\n\n```bash\n$ npm test\n# running the tests with logs\n$ DEBUG=\"solid:*\" npm test\n```\n\nIn order to test a single component, you can run\n\n```javascript\nnpm run test-(acl|formats|params|patch)\n```\n\n\n## Contributing\n\n`solid` is only possible due to the excellent work of the following contributors:\n\n<table>\n  <tbody>\n    <tr>\n      <th align=\"left\">Tim Berners-Lee</th>\n      <td><a href=\"https://github.com/timbl\">GitHub/timbl</a></td>\n      <td><a href=\"http://twitter.com/timberners_lee\">Twitter/@timberners_lee</a></td>\n      <td><a href=\"https://www.w3.org/People/Berners-Lee/card#i\">webid</a></td>\n    </tr>\n    <tr>\n      <th align=\"left\">Nicola Greco</th>\n      <td><a href=\"https://github.com/nicola\">GitHub/nicola</a></td>\n      <td><a href=\"http://twitter.com/nicolagreco\">Twitter/@nicolagreco</a></td>\n      <td><a href=\"https://nicola.databox.me/profile/card#me\">webid</a></td>\n    </tr>\n    <tr>\n      <th align=\"left\">Martin Martinez Rivera</th>\n      <td><a href=\"https://github.com/martinmr\">GitHub/martinmr</a></td>\n      <td></td>\n      <td></td>\n    </tr>\n    <tr>\n      <th align=\"left\">Andrei Sambra</th>\n      <td><a href=\"https://github.com/deiu\">GitHub/deiu</a></td>\n      <td><a href=\"http://twitter.com/deiu\">Twitter/@deiu</a></td>\n      <td><a href=\"https://deiu.me/profile#me\">webid</a></td>\n    </tr>\n  </tbody>\n</table>\n\n#### Do you want to contribute?\n\n- [Join us in Gitter](https://gitter.im/solid/chat) to help with development or to hang out with us :)\n- [Create a new issue](https://github.com/solid/node-solid-server/issues/new) to report bugs\n- [Fix an issue](https://github.com/solid/node-solid-server/issues)\n\nHave a look at [CONTRIBUTING.md](https://github.com/solid/node-solid-server/blob/master/CONTRIBUTING.md).\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/solid/node-solid-server.git"
  },
  "scripts": {
    "clean": "rm -rf config.json accounts profile inbox .acl settings",
    "mocha": "./node_modules/mocha/bin/mocha ./test/*.js",
    "solid": "node ./bin/solid.js",
    "standard": "standard",
    "test": "npm run standard && npm run mocha",
    "test-acl": "./node_modules/mocha/bin/mocha ./test/acl.js",
    "test-debug": "DEBUG='solid:*' ./node_modules/mocha/bin/mocha ./test/*.js",
    "test-errors": "./node_modules/mocha/bin/mocha ./test/errors.js",
    "test-formats": "./node_modules/mocha/bin/mocha ./test/formats.js",
    "test-http": "./node_modules/mocha/bin/mocha ./test/http.js",
    "test-params": "./node_modules/mocha/bin/mocha ./test/params.js"
  },
  "standard": {
    "globals": [
      "after",
      "before",
      "beforeEach",
      "describe",
      "it"
    ]
  },
  "version": "2.3.0"
}
